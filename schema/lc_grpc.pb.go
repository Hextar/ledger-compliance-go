// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package schema

import (
	context "context"
	schema "github.com/codenotary/immudb/pkg/api/schema"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// LcServiceClient is the client API for LcService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LcServiceClient interface {
	Set(ctx context.Context, in *schema.KeyValue, opts ...grpc.CallOption) (*schema.Index, error)
	Get(ctx context.Context, in *schema.Key, opts ...grpc.CallOption) (*schema.Item, error)
	SafeSet(ctx context.Context, in *schema.SafeSetOptions, opts ...grpc.CallOption) (*schema.Proof, error)
	SafeGet(ctx context.Context, in *schema.SafeGetOptions, opts ...grpc.CallOption) (*schema.SafeItem, error)
	CurrentRoot(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*schema.Root, error)
	Health(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*schema.HealthResponse, error)
	ReportTamper(ctx context.Context, in *ReportOptions, opts ...grpc.CallOption) (*empty.Empty, error)
}

type lcServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLcServiceClient(cc grpc.ClientConnInterface) LcServiceClient {
	return &lcServiceClient{cc}
}

func (c *lcServiceClient) Set(ctx context.Context, in *schema.KeyValue, opts ...grpc.CallOption) (*schema.Index, error) {
	out := new(schema.Index)
	err := c.cc.Invoke(ctx, "/lc.schema.LcService/Set", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lcServiceClient) Get(ctx context.Context, in *schema.Key, opts ...grpc.CallOption) (*schema.Item, error) {
	out := new(schema.Item)
	err := c.cc.Invoke(ctx, "/lc.schema.LcService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lcServiceClient) SafeSet(ctx context.Context, in *schema.SafeSetOptions, opts ...grpc.CallOption) (*schema.Proof, error) {
	out := new(schema.Proof)
	err := c.cc.Invoke(ctx, "/lc.schema.LcService/SafeSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lcServiceClient) SafeGet(ctx context.Context, in *schema.SafeGetOptions, opts ...grpc.CallOption) (*schema.SafeItem, error) {
	out := new(schema.SafeItem)
	err := c.cc.Invoke(ctx, "/lc.schema.LcService/SafeGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lcServiceClient) CurrentRoot(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*schema.Root, error) {
	out := new(schema.Root)
	err := c.cc.Invoke(ctx, "/lc.schema.LcService/CurrentRoot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lcServiceClient) Health(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*schema.HealthResponse, error) {
	out := new(schema.HealthResponse)
	err := c.cc.Invoke(ctx, "/lc.schema.LcService/Health", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lcServiceClient) ReportTamper(ctx context.Context, in *ReportOptions, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/lc.schema.LcService/ReportTamper", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LcServiceServer is the server API for LcService service.
// All implementations must embed UnimplementedLcServiceServer
// for forward compatibility
type LcServiceServer interface {
	Set(context.Context, *schema.KeyValue) (*schema.Index, error)
	Get(context.Context, *schema.Key) (*schema.Item, error)
	SafeSet(context.Context, *schema.SafeSetOptions) (*schema.Proof, error)
	SafeGet(context.Context, *schema.SafeGetOptions) (*schema.SafeItem, error)
	CurrentRoot(context.Context, *empty.Empty) (*schema.Root, error)
	Health(context.Context, *empty.Empty) (*schema.HealthResponse, error)
	ReportTamper(context.Context, *ReportOptions) (*empty.Empty, error)
	mustEmbedUnimplementedLcServiceServer()
}

// UnimplementedLcServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLcServiceServer struct {
}

func (*UnimplementedLcServiceServer) Set(context.Context, *schema.KeyValue) (*schema.Index, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Set not implemented")
}
func (*UnimplementedLcServiceServer) Get(context.Context, *schema.Key) (*schema.Item, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedLcServiceServer) SafeSet(context.Context, *schema.SafeSetOptions) (*schema.Proof, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SafeSet not implemented")
}
func (*UnimplementedLcServiceServer) SafeGet(context.Context, *schema.SafeGetOptions) (*schema.SafeItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SafeGet not implemented")
}
func (*UnimplementedLcServiceServer) CurrentRoot(context.Context, *empty.Empty) (*schema.Root, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CurrentRoot not implemented")
}
func (*UnimplementedLcServiceServer) Health(context.Context, *empty.Empty) (*schema.HealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Health not implemented")
}
func (*UnimplementedLcServiceServer) ReportTamper(context.Context, *ReportOptions) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportTamper not implemented")
}
func (*UnimplementedLcServiceServer) mustEmbedUnimplementedLcServiceServer() {}

func RegisterLcServiceServer(s *grpc.Server, srv LcServiceServer) {
	s.RegisterService(&_LcService_serviceDesc, srv)
}

func _LcService_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(schema.KeyValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LcServiceServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lc.schema.LcService/Set",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LcServiceServer).Set(ctx, req.(*schema.KeyValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _LcService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(schema.Key)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LcServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lc.schema.LcService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LcServiceServer).Get(ctx, req.(*schema.Key))
	}
	return interceptor(ctx, in, info, handler)
}

func _LcService_SafeSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(schema.SafeSetOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LcServiceServer).SafeSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lc.schema.LcService/SafeSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LcServiceServer).SafeSet(ctx, req.(*schema.SafeSetOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _LcService_SafeGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(schema.SafeGetOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LcServiceServer).SafeGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lc.schema.LcService/SafeGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LcServiceServer).SafeGet(ctx, req.(*schema.SafeGetOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _LcService_CurrentRoot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LcServiceServer).CurrentRoot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lc.schema.LcService/CurrentRoot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LcServiceServer).CurrentRoot(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _LcService_Health_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LcServiceServer).Health(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lc.schema.LcService/Health",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LcServiceServer).Health(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _LcService_ReportTamper_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LcServiceServer).ReportTamper(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lc.schema.LcService/ReportTamper",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LcServiceServer).ReportTamper(ctx, req.(*ReportOptions))
	}
	return interceptor(ctx, in, info, handler)
}

var _LcService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "lc.schema.LcService",
	HandlerType: (*LcServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Set",
			Handler:    _LcService_Set_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _LcService_Get_Handler,
		},
		{
			MethodName: "SafeSet",
			Handler:    _LcService_SafeSet_Handler,
		},
		{
			MethodName: "SafeGet",
			Handler:    _LcService_SafeGet_Handler,
		},
		{
			MethodName: "CurrentRoot",
			Handler:    _LcService_CurrentRoot_Handler,
		},
		{
			MethodName: "Health",
			Handler:    _LcService_Health_Handler,
		},
		{
			MethodName: "ReportTamper",
			Handler:    _LcService_ReportTamper_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lc.proto",
}
